// THIS FILE IS AUTOMATICALLY GENERATED; DO NOT EDIT

#![cfg_attr(rustfmt, rustfmt_skip)]
#![cfg_attr(feature = "cargo-clippy", allow(match_same_arms))]

use visit::Visitor;

pub trait Spanned {
    /// Returns the `proc_macro::Span` of this item if it can be retrieved.
    ///
    /// This method is only available when the `unstable` feature is enabled.
    ///
    /// # Panics
    ///
    /// If the item's `Span` isn't available, this method panics.
    fn span(&self) -> ::proc_macro::Span {
        self.try_span().expect("unwrapping unavaiable Span")
    }

    /// Returns the `proc_macro::Span` of this item if it can be retrieved. When
    /// using the `Span` for error reporting, it is safe to `unwrap()` it.
    ///
    /// This method is only available when the `unstable` feature is enabled.
    fn try_span(&self) -> Option<::proc_macro::Span>;
}

#[derive(Default)]
struct SpanVisitor {
    span: Option<::proc_macro::Span>,
}

impl<'a> Visitor<'a> for SpanVisitor {
    fn visit_span(&mut self, sp: &'a ::proc_macro2::Span) {
        self.span = self.span.map_or(Some(sp.into_inner()), |s| s.join(sp.into_inner()));
    }
}


impl Spanned for ::Abi {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_abi(self);
        visitor.span
    }
}


impl Spanned for ::AngleBracketedGenericArguments {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_angle_bracketed_generic_arguments(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ArgCaptured {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_arg_captured(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ArgSelf {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_arg_self(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ArgSelfRef {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_arg_self_ref(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Arm {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_arm(self);
        visitor.span
    }
}


impl Spanned for ::AttrStyle {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_attr_style(self);
        visitor.span
    }
}


impl Spanned for ::Attribute {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_attribute(self);
        visitor.span
    }
}


impl Spanned for ::BareFnArg {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_bare_fn_arg(self);
        visitor.span
    }
}


impl Spanned for ::BareFnArgName {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_bare_fn_arg_name(self);
        visitor.span
    }
}


impl Spanned for ::BinOp {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_bin_op(self);
        visitor.span
    }
}


impl Spanned for ::Binding {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_binding(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Block {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_block(self);
        visitor.span
    }
}


impl Spanned for ::Body {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_body(self);
        visitor.span
    }
}


impl Spanned for ::BodyEnum {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_body_enum(self);
        visitor.span
    }
}


impl Spanned for ::BodyStruct {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_body_struct(self);
        visitor.span
    }
}


impl Spanned for ::BoundLifetimes {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_bound_lifetimes(self);
        visitor.span
    }
}


impl Spanned for ::ConstParam {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_const_param(self);
        visitor.span
    }
}


impl Spanned for ::DeriveInput {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_derive_input(self);
        visitor.span
    }
}


impl Spanned for ::Expr {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprAddrOf {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_addr_of(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprArray {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_array(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprAssign {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_assign(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprAssignOp {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_assign_op(self);
        visitor.span
    }
}


impl Spanned for ::ExprBinary {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_binary(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprBlock {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_block(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprBox {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_box(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprBreak {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_break(self);
        visitor.span
    }
}


impl Spanned for ::ExprCall {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_call(self);
        visitor.span
    }
}


impl Spanned for ::ExprCast {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_cast(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprCatch {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_catch(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprClosure {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_closure(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprContinue {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_continue(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprField {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_field(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprForLoop {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_for_loop(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprGroup {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_group(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprIf {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_if(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprIfLet {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_if_let(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprInPlace {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_in_place(self);
        visitor.span
    }
}


impl Spanned for ::ExprIndex {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_index(self);
        visitor.span
    }
}


impl Spanned for ::ExprLit {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_lit(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprLoop {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_loop(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_macro(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprMatch {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_match(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprMethodCall {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_method_call(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprParen {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_paren(self);
        visitor.span
    }
}


impl Spanned for ::ExprPath {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_path(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprRange {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_range(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprRepeat {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_repeat(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprReturn {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_return(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprStruct {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_struct(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprTry {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_try(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprTuple {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_tuple(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_type(self);
        visitor.span
    }
}


impl Spanned for ::ExprUnary {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_unary(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprUnsafe {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_unsafe(self);
        visitor.span
    }
}


impl Spanned for ::ExprVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_verbatim(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprWhile {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_while(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprWhileLet {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_while_let(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ExprYield {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_expr_yield(self);
        visitor.span
    }
}


impl Spanned for ::Field {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_field(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::FieldPat {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_field_pat(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::FieldValue {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_field_value(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::File {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_file(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::FnArg {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_fn_arg(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::FnDecl {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_fn_decl(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ForeignItem {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_foreign_item(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ForeignItemFn {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_foreign_item_fn(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ForeignItemStatic {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_foreign_item_static(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ForeignItemType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_foreign_item_type(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ForeignItemVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_foreign_item_verbatim(self);
        visitor.span
    }
}


impl Spanned for ::GenericArgument {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_generic_argument(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::GenericMethodArgument {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_generic_method_argument(self);
        visitor.span
    }
}


impl Spanned for ::GenericParam {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_generic_param(self);
        visitor.span
    }
}


impl Spanned for ::Generics {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_generics(self);
        visitor.span
    }
}


impl Spanned for ::Ident {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_ident(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItem {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItemConst {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item_const(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItemMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item_macro(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItemMethod {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item_method(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItemType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item_type(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ImplItemVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_impl_item_verbatim(self);
        visitor.span
    }
}


impl Spanned for ::Index {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_index(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Item {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemConst {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_const(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemEnum {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_enum(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemExternCrate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_extern_crate(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemFn {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_fn(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemForeignMod {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_foreign_mod(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemImpl {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_impl(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_macro(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemMacro2 {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_macro2(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemMod {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_mod(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemStatic {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_static(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemStruct {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_struct(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemTrait {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_trait(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_type(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemUnion {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_union(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemUse {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_use(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::ItemVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_item_verbatim(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Label {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_label(self);
        visitor.span
    }
}


impl Spanned for ::Lifetime {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_lifetime(self);
        visitor.span
    }
}


impl Spanned for ::LifetimeDef {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_lifetime_def(self);
        visitor.span
    }
}


impl Spanned for ::Lit {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_lit(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Local {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_local(self);
        visitor.span
    }
}


impl Spanned for ::Macro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_macro(self);
        visitor.span
    }
}


impl Spanned for ::Member {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_member(self);
        visitor.span
    }
}


impl Spanned for ::MetaItem {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_meta_item(self);
        visitor.span
    }
}


impl Spanned for ::MetaItemList {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_meta_item_list(self);
        visitor.span
    }
}


impl Spanned for ::MetaNameValue {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_meta_name_value(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::MethodSig {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_method_sig(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::MethodTurbofish {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_method_turbofish(self);
        visitor.span
    }
}


impl Spanned for ::NestedMetaItem {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_nested_meta_item(self);
        visitor.span
    }
}


impl Spanned for ::ParenthesizedGenericArguments {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_parenthesized_generic_arguments(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Pat {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatBox {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_box(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatIdent {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_ident(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatLit {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_lit(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_macro(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatPath {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_path(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatRange {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_range(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatRef {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_ref(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatSlice {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_slice(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatStruct {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_struct(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatTuple {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_tuple(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatTupleStruct {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_tuple_struct(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_verbatim(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::PatWild {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_pat_wild(self);
        visitor.span
    }
}


impl Spanned for ::Path {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_path(self);
        visitor.span
    }
}


impl Spanned for ::PathArguments {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_path_arguments(self);
        visitor.span
    }
}


impl Spanned for ::PathSegment {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_path_segment(self);
        visitor.span
    }
}


impl Spanned for ::PolyTraitRef {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_poly_trait_ref(self);
        visitor.span
    }
}


impl Spanned for ::QSelf {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_qself(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::RangeLimits {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_range_limits(self);
        visitor.span
    }
}


impl Spanned for ::ReturnType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_return_type(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::Stmt {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_stmt(self);
        visitor.span
    }
}


impl Spanned for ::TraitBoundModifier {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_bound_modifier(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItem {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItemConst {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item_const(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItemMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item_macro(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItemMethod {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item_method(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItemType {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item_type(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::TraitItemVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_trait_item_verbatim(self);
        visitor.span
    }
}


impl Spanned for ::Type {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type(self);
        visitor.span
    }
}


impl Spanned for ::TypeArray {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_array(self);
        visitor.span
    }
}


impl Spanned for ::TypeBareFn {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_bare_fn(self);
        visitor.span
    }
}


impl Spanned for ::TypeGroup {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_group(self);
        visitor.span
    }
}


impl Spanned for ::TypeImplTrait {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_impl_trait(self);
        visitor.span
    }
}


impl Spanned for ::TypeInfer {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_infer(self);
        visitor.span
    }
}


impl Spanned for ::TypeMacro {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_macro(self);
        visitor.span
    }
}


impl Spanned for ::TypeNever {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_never(self);
        visitor.span
    }
}


impl Spanned for ::TypeParam {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_param(self);
        visitor.span
    }
}


impl Spanned for ::TypeParamBound {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_param_bound(self);
        visitor.span
    }
}


impl Spanned for ::TypeParen {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_paren(self);
        visitor.span
    }
}


impl Spanned for ::TypePath {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_path(self);
        visitor.span
    }
}


impl Spanned for ::TypePtr {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_ptr(self);
        visitor.span
    }
}


impl Spanned for ::TypeReference {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_reference(self);
        visitor.span
    }
}


impl Spanned for ::TypeSlice {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_slice(self);
        visitor.span
    }
}


impl Spanned for ::TypeTraitObject {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_trait_object(self);
        visitor.span
    }
}


impl Spanned for ::TypeTuple {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_tuple(self);
        visitor.span
    }
}


impl Spanned for ::TypeVerbatim {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_type_verbatim(self);
        visitor.span
    }
}


impl Spanned for ::UnOp {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_un_op(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::UseGlob {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_use_glob(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::UseList {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_use_list(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::UsePath {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_use_path(self);
        visitor.span
    }
}

# [ cfg ( feature = "full" ) ]
impl Spanned for ::UseTree {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_use_tree(self);
        visitor.span
    }
}


impl Spanned for ::Variant {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_variant(self);
        visitor.span
    }
}


impl Spanned for ::VariantData {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_variant_data(self);
        visitor.span
    }
}


impl Spanned for ::VisCrate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_vis_crate(self);
        visitor.span
    }
}


impl Spanned for ::VisPublic {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_vis_public(self);
        visitor.span
    }
}


impl Spanned for ::VisRestricted {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_vis_restricted(self);
        visitor.span
    }
}


impl Spanned for ::Visibility {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_visibility(self);
        visitor.span
    }
}


impl Spanned for ::WhereBoundPredicate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_where_bound_predicate(self);
        visitor.span
    }
}


impl Spanned for ::WhereClause {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_where_clause(self);
        visitor.span
    }
}


impl Spanned for ::WhereEqPredicate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_where_eq_predicate(self);
        visitor.span
    }
}


impl Spanned for ::WherePredicate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_where_predicate(self);
        visitor.span
    }
}


impl Spanned for ::WhereRegionPredicate {
    fn try_span(&self) -> Option<::proc_macro::Span> {
        let mut visitor = SpanVisitor::default();
        visitor.visit_where_region_predicate(self);
        visitor.span
    }
}


